---
- name: Test remote playbook execution
  hosts: localhost
  vars:
    debug: false
    tmp_dir: /tmp/remote_playbook
   # tags: "tag1,tag2,tag3"
   # limit: "host1,host2,host3"
   # env: production/staging/test/utvikling
  tasks:
    # Check 
  - name: Fail when env is not defined
    ansible.builtin.fail:
      msg: "Need to set variable env to production/staging/test/utvikling"
    when: env is undefined
  
  - name: Create {{ tmp_dir }}
    ansible.builtin.file:
      path: "{{ tmp_dir }}"
      state: directory

    # Set -t option if tags is used
  - name: Set -t option if tags is specified
    ansible.builtin.set_fact:
      tag_opt: "{{ '-t' if tags is defined else '' }}"
      tags: "{{ tags | default('') }}"

    # Set -l option if limit is used
  - name: Set -l option if limit is specified
    ansible.builtin.set_fact:
      limit_opt: "{{ '-l' if limit is defined else '' }}"
      limit: "{{ limit | default('') }}"

    # Playbook execution on remote host  
  - name: Executing remote playbook, holy shit breaking barriers
    ansible.builtin.command:
      cmd: ansible-playbook main.yml -i inventory/{{ env | quote }}/hosts.yml {{ tag_opt }} {{ tags }} {{ limit_opt }} {{ limit }}
      chdir: /home/workspace/test
    register: playbook_output
    ignore_errors: true
    no_log: true

    # Extracting output
  - name: Extract task results
    ansible.builtin.set_fact: 
      output_lines: "{{ playbook_output.stdout_lines }}"
      output_len: "{{ playbook_output.stdout_lines | length }}"

  - name: Template output to txt files
    ansible.builtin.template:
      src: "templates/{{ item }}.j2.txt"
      dest: "{{ tmp_dir }}/{{ item }}.txt"
    with_items:
      - changed_tasks
      - failed_tasks
      - ok_tasks
      - recap
    vars:
      lines: "{{ output_lines }}"

  - name: Slurp ok tasks
    ansible.builtin.slurp:
      src: "{{ tmp_dir }}/ok_tasks.txt"
    register: ok_tasks

  - name: Slurp changed tasks
    ansible.builtin.slurp:
      src: "{{ tmp_dir }}/changed_tasks.txt"
    register: changed_tasks

  - name: Slurp failed tasks
    ansible.builtin.slurp:
      src: "{{ tmp_dir }}/failed_tasks.txt"
    register: failed_tasks

  - name: Slurp recap
    ansible.builtin.slurp:
      src: "{{ tmp_dir }}/recap.txt"
    register: recap

  - name: Delete {{ tmp_dir }} unless debug = true
    ansible.builtin.file:
      path: "{{ tmp_dir }}"
      state: absent
    when: not debug

  - name: Decode the slurped file content
    ansible.builtin.set_fact:
      file_content_failed: "{{ failed_tasks.content | b64decode }}"
      file_content_changed: "{{ changed_tasks.content | b64decode }}"
      file_content_ok: "{{ ok_tasks.content | b64decode }}"
      file_content_recap: "{{ recap.content | b64decode }}"

  - name: Split the decoded content into lines
    ansible.builtin.set_fact:
      failed_lines: "{{ file_content_failed.split('\n') }}"
      changed_lines: "{{ file_content_changed.split('\n') }}"
      ok_lines: "{{ file_content_ok.split('\n') }}"
      recap_lines: "{{ file_content_recap.split('\n') }}"

  - name: Display successfull tasks
    ansible.builtin.debug:
      msg: "{{ ok_lines }}"
    when: ok_lines | length > 1
  
  - name: Display changed tasks
    ansible.builtin.debug:
      msg: "{{ changed_lines }}"
    when: changed_lines | length > 1
    changed_when: changed_lines | length > 1

  - name: Display failed tasks
    ansible.builtin.debug:
      msg: "{{ failed_lines }}"
    when: failed_lines | length > 1
    failed_when: failed_lines | length > 1
    ignore_errors: true

  - name: Display recap
    ansible.builtin.debug:
      msg: "{{ recap_lines }}"
    when: recap_lines | length > 1

  - name: debug
    ansible.builtin.debug:
      msg: "{{ output_lines }}"
    when: debug
